#include<iostream>
#include<cmath>
using namespace std;

#include<eigen3/Eigen/Core>
#include<eigen3/Eigen/Geometry>

#include "/home/yuchen/Sophus/sophus/so3.h"
#include "/home/yuchen/Sophus/sophus/se3.h"

//#include "Sophus/sophus/se3.h"


int main( int argc, char**argv)

{
  // roation matrix: rotate 90 along z axis, generated by angle axis 
  Eigen::Matrix3d R = Eigen::AngleAxisd(M_PI/2, Eigen::Vector3d(0,0,1)).toRotationMatrix();
  cout<<"R="<<R<<endl;
  Sophus::SO3 SO3_R(R); //sophus::so(3) can generate from rotation matrix
  Sophus::SO3 SO3_v(0,0,M_PI/2); // get so3 from rotation Vector
  Eigen::Quaterniond q(R); 
  Sophus::SO3 SO3_q(q); // get so3 from quaternond
  
  // print as so(3) why?
  cout<<"SO(3) from matrix:"<<SO3_R<<endl;//3x1 vector why?
  cout<<"SO(3) from matrix:"<<SO3_v<<endl;
  cout<<"SO(3) from matrix:"<<SO3_q<<endl;
  
  
  ///get Lie Alg from expo map
  Eigen::Vector3d so3 =SO3_R.log(); 
  cout<<"so3="<<so3.transpose()<<endl;
  // hat ^ is vector to -ve symm matrix
  cout<<"so3 hat="<<Sophus::SO3::hat(so3)<<endl;
  
  
  //similarly, vee is matrix to vector
  cout<<"so3 hat vee="<<Sophus::SO3::vee(Sophus::SO3::hat(so3)).transpose()<<endl;
  
  
  // delta R 
  Eigen::Vector3d update_so3(1e-4,0,0);
  Sophus::SO3 SO3_updated =Sophus::SO3::exp(update_so3)*SO3_R; //left multiply update
  cout<<"so3 hat vee="<<(Sophus::SO3::vee(Sophus::SO3::hat(so3))).transpose()<<endl;
  
  cout<<"****************************"<<endl;
  
 // similar thing happens to SE(3)
  Eigen::Vector3d t(1,0,0); //move along x axis by 1
  Sophus::SE3 SE3_Rt(R,t); // get SE(3) from R,t
  Sophus::SE3 SE3_qt(q,t); //get SE(3) from q,t
  cout<<"SE3 from R,t ="<<SE3_Rt<<endl;
  cout<<"SE3 from q,t ="<<SE3_qt<<endl;
  
  //Lie Alg is a 6d vector, typedef for convience
  typedef Eigen::Matrix<double,6,1> Vector6d;
  Vector6d se3 =SE3_Rt.log();
  cout<<"se3="<<se3<<endl;
  // in sophus, se(3) consists move and rotate, move 1st, like in the book
  // similarly, hat and vee
  cout<<"se3 hat="<<endl<<Sophus::SE3::hat(se3)<<endl;
  cout<<"se3 hat vee="<<endl<<Sophus::SE3::vee(Sophus::SE3::hat(se3)).transpose()<<endl;
  
  // show update 
  Vector6d update_se3; //update value
  update_se3.setZero();
  update_se3.setZero();
  update_se3(0,0) =1e-4d;
  Sophus::SE3 SE3_updated =Sophus::SE3::exp(update_se3)*SE3_Rt;
  cout<<"SE3 updated ="<<endl<<SE3_updated.matrix()<<endl;
  
  
  
  
  return 0;
  
  
  
}